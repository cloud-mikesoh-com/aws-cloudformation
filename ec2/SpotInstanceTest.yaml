Description: Deploy Spot Instance
Parameters:
  commitSha: 
    Type: String
    Description: Git commit SHA
    Default: nocommit
  deployDate:
    Type: String
    Description: Date for the deployment
    Default: '1970-01-01 00:00:00'
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: starbuck-wsl-ubuntu-ed25519-2021.12.23
  SubnetId:
    Description: The VPC that the EC2 instance should deploy into
    Type: string
    Default: Caprica
  InstanceType:
    Description: EC2 Instance Type.  Default is t3a.small
    Type: String
    Default: t3a.small
    AllowedValues: ['t3.micro', 't3.small', 't3.medium', 't3a.micro', 't3a.small', 't3a.medium']
  Architecture:
    Description: 'Processor Architecture type.  Valid values: amd64, arm64.  Default amd64'
    Type: String
    Default: amd64
    AllowedValues: ['amd64', 'arm64']
  NewRelicInfraKey:
    Type: AWS::SSM::Parameter::Value<String>
    Description: New Relic Infrastructure Key for New Relic
    Default: '/us-east-1/new-relic/infrastructure'
  Expiry:
    Type: String
    Description: Expiration for Spot Request
    Default: '2030-12-31T23:59:59Z'
  ConfigSet:
    Type: String
    Description: What config sets to run
    Default: default

Mappings:
  RegionArchAMI:
    us-east-1:
      amd64: ami-04505e74c0741db8d
    us-east-2:
      amd64: ami-0fb653ca2d3203ac1
    us-west-1:
      amd64: ami-01f87c43e618bf8f0
    us-west-2:
      amd64: ami-0892d3c7ee96c0bf7
  MaxSpotPrice:
    t3.micro: 
      SpotPrice: '0.005'
    t3a.micro: 
      SpotPrice: '0.005'
    t3.small: 
      SpotPrice: '0.01'
    t3a.small: 
      SpotPrice: '0.01'
    t3.medium: 
      SpotPrice: '0.015'
    t3a.medium: 
      SpotPrice: '0.015'
  VpcSubnets:
    Caprica:
      subnets: ["subnet-4615b26d", "subnet-39044603"]
    NewCaprica:
      subnets: ["subnet-0a5dd1b1751673b6d", subnet-0973116fea1eb0745"]
  GalacticaSg:
    Caprica:
      sgId: foo
    NewCaprica:
      SgId: bar

Conditions:
  InstallDockerCe: !Equals
    - !Ref ConfigSet
    - 'Docker'

Resources:
  SpotFleetRequest:
    Type: 'AWS::EC2::SpotFleet'
    Metadata:
      AWS::CloudFormation::Init: 
        configSets: 
          default:
            - 'SshKeys' 
            - 'AwsCli'
            - 'NewRelic'
          Docker:
            - ConfigSet: default
            - 'Docker'

        SshKeys:
          files:
            /home/ubuntu/.ssh/authorized_keys:
              source: 'https://github.com/sohmc/ssh-keys/releases/download/latest/authorized_keys'
              mode: '000600'
              owner: ubuntu
              group: ubuntu
          
          commands:
            SshKeyInstallSignal:
              test: test -e /home/ubuntu/.ssh/authorized_keys
              ignoreErrors: false
              command: !Sub |
                  #!/bin/bash -xe

                  echo "Sending signal for SshKeyInstall" >> /tmp/test.txt

                  FILESIZE=$(stat -c%s "~ubuntu/.ssh/authorized_keys")

                  echo "Checking filesize of authorized_keys" >> /tmp/test.txt
                  test -e ${!FILESIZE} > 150

                  /opt/aws/bin/cfn-signal -e $? \
                    --stack ${AWS::StackName} \
                    --region ${AWS::Region} \
                    --reason "ssh authorized_keys size: ${!FILESIZE} -- exit code: $?" \
                    --data "ssh authorized_keys size: ${!FILESIZE} -- exit code: $?" \
                    '${SshKeyInstallHandle}'

                  echo "Done" >> /tmp/test.txt

        NewRelic: 
          services:
            NewRelicService:
              enabled: true
              ensureRunning: true
              commands:
                - InstallNewRelicAgent

          commands:
            InstallNewRelicAgent:
              files:
                /etc/newrelic-infra.yml:
                  content: !Join [" ", ["license_key:", !Ref NewRelicInfraKey] ]
                  mode: '000644'
                  owner: root
                  group: root
              command: |
                #!/bin/bash -xe
                echo "standard:NewRelicAgent" >> /tmp/test.txt
                cat /etc/newrelic-infra.yml >> /tmp/test.txt
                
                curl -s 'https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg' | sudo apt-key add -
                printf 'deb https://download.newrelic.com/infrastructure_agent/linux/apt focal main' | sudo tee -a /etc/apt/sources.list.d/newrelic-infra.list
                apt-get update && apt-get install newrelic-infra -y

            SignalNewRelicAgentCondition:
              test: test -e /usr/bin/newrelic-infra
              ignoreErrors: false
              command: !Sub |
                #!/bin/bash -xe

                /usr/bin/newrelic-infra --version

                /opt/aws/bin/cfn-signal -e $? \
                  --stack ${AWS::StackName} \
                  --region ${AWS::Region} \
                  --reason "NewRelicAgent_version: $(/usr/bin/newrelic-infra --version) -- exit code: $?" \
                  --data "NewRelicAgent_version: $(/usr/bin/newrelic-infra --version) -- exit code: $?" \
                  '${InstallNewRelicAgentHandle}'

                /usr/bin/newrelic-infra --version >> /tmp/test.txt

        AwsCli:
          packages:
            apt:
              zip: []
              unzip: []
          commands: 
            InstallAwsCli:
              ignoreErrors: true
              command: !Sub |
                #!/bin/bash -xe
                cd /tmp

                echo 'starting AWS CLI installation' >> /tmp/test.txt
                whoami >> /tmp/test.txt

                curl -Ls 'https://raw.githubusercontent.com/cloud-mikesoh-com/aws-bootstrap/main/packages/01-awscli.sh' -o awscli.sh
                bash awscli.sh

                aws --version
                
                /opt/aws/bin/cfn-signal -e $? \
                  --stack ${AWS::StackName} \
                  --region ${AWS::Region} \
                  --reason "awsCli_version: $(aws --version) -- exit code: $?" \
                  --data "awsCli_version: $(aws --version) -- exit code: $?" \
                  '${InstallAwsCliHandle}'

                aws --version >> /tmp/test.txt

        Docker:
          services:
            DockerCeService:
              enabled: true
              ensureRunning: true
              commands:
                - InstallDockerCE

          commands:
            InstallDockerCE:
              ignoreErrors: true
              command: |
                #!/bin/bash -xe
                cd /tmp

                echo 'Starting Docker-CE installation...' >> /tmp/test.txt

                curl -Ls 'https://raw.githubusercontent.com/cloud-mikesoh-com/aws-bootstrap/main/packages/50-docker.sh' -o docker.sh
                bash docker.sh

                /usr/sbin/usermod -aG docker ubuntu
            
            SignalInstallDockerCeCondition:
              test: test -e /usr/bin/docker
              ignoreErrors: false
              command: !Sub |
                #!/bin/bash -xe

                /usr/bin/docker --version

                /opt/aws/bin/cfn-signal -e $? \
                  --stack ${AWS::StackName} \
                  --region ${AWS::Region} \
                  --reason "Docker_version: $(/usr/bin/docker --version) -- exit code: $?" \
                  --data "Docker_version: $(/usr/bin/docker --version) -- exit code: $?" \
                  '${InstallDockerCeHandle}'

                /usr/bin/docker --version >> /tmp/test.txt

                echo 'Docker install completed' >> /tmp/test.txt

    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: lowestPrice
        IamFleetRole: 'arn:aws:iam::426869176820:role/aws-service-role/spotfleet.amazonaws.com/AWSServiceRoleForEC2SpotFleet'
        SpotPrice: !FindInMap [MaxSpotPrice, !Ref 'InstanceType', 'SpotPrice']
        TargetCapacity: 1
        Type: request
        ValidUntil: !Ref Expiry
        TerminateInstancesWithExpiration: false
        LaunchSpecifications:
          - EbsOptimized: false
            InstanceType: !Ref 'InstanceType'
            ImageId: !FindInMap [RegionArchAMI, !Ref 'AWS::Region', !Ref 'Architecture']
            IamInstanceProfile: 
              Arn: 'arn:aws:iam::426869176820:instance-profile/ec2-user-role'
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: managedBy
                    Value: !Join ['-', ['CloudFormationDeployment', !Ref 'commitSha'] ]
                  - Key: deployDate
                    Value: !Ref 'deployDate'
            SubnetId: !Ref 'SubnetId'
            SecurityGroups:
              - GroupId: !ImportValue 'Galactica-SG-Deploy:galacticaSG'
            KeyName: !Ref KeyName
            BlockDeviceMappings:
              - DeviceName: '/dev/sda1'
                Ebs:
                  DeleteOnTermination: true
                  VolumeSize: 8
                  VolumeType: gp3
            UserData: 
              Fn::Base64:
                !Sub | 
                  #!/bin/bash -xe
                  # This file should be copied into the User Data section of creating AWS
                  # EC2 instances.

                  echo Installing aws-cfn-bootstrap
                  curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz -o /tmp/aws-cfn-bootstrap.tar.gz

                  mkdir -p /opt/aws/bin
                  python3 -m easy_install --script-dir /opt/aws/bin /tmp/aws-cfn-bootstrap.tar.gz

                  echo Initializing instance...
                  /opt/aws/bin/cfn-init -v \
                    --stack ${AWS::StackName} \
                    --region ${AWS::Region} \
                    --resource "SpotFleetRequest" \
                    --configsets ${ConfigSet}

                  export AWS_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                  echo Sending signal: $?
                  /opt/aws/bin/cfn-signal -e $? \
                    --stack ${AWS::StackName} \
                    --region ${AWS::Region} \
                    --data "ipv4_hostname: ${!AWS_HOSTNAME}" \
                    --reason "ipv4_hostname: ${!AWS_HOSTNAME}" \
                    '${HostNameHandle}'

# Handles and Wait Conditions
  SshKeyInstallHandle: 
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  SshKeyInstallCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: 'SpotFleetRequest'
    Properties:
      Count: 1
      Handle: !Ref 'SshKeyInstallHandle'
      Timeout: 600

  InstallAwsCliHandle: 
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  InstallAwsCliCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: 'SpotFleetRequest'
    Properties:
      Count: 1
      Handle: !Ref 'InstallAwsCliHandle'
      Timeout: 600

  InstallNewRelicAgentHandle: 
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  InstallNewRelicAgentCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: 'SpotFleetRequest'
    Properties:
      Count: 1
      Handle: !Ref 'InstallNewRelicAgentHandle'
      Timeout: 600

  InstallDockerCeHandle: 
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  InstallDockerCeCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: 'SpotFleetRequest'
    Condition: InstallDockerCe
    Properties:
      Count: 1
      Handle: !Ref 'InstallDockerCeHandle'
      Timeout: 600

  HostNameHandle: 
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  HostNameCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: 'SpotFleetRequest'
    Properties:
      Count: 1
      Handle: !Ref 'HostNameHandle'
      Timeout: 600

Outputs:
  InstancePublicHostname:
    Description: Public Hostname of the deployed Spot Instance
    Value: !GetAtt HostNameCondition.Data

  AwsCliVersion:
    Description: Install Version of the AWS CLI
    Value: !GetAtt InstallAwsCliCondition.Data

  NewRelicAgentVersion:
    Description: Version of the New Relic Agent Installed
    Value: !GetAtt InstallNewRelicAgentCondition.Data

  DockerCeVersion:
    Description: Version of the New Relic Agent Installed
    Condition: InstallDockerCe
    Value: !GetAtt InstallDockerCeCondition.Data