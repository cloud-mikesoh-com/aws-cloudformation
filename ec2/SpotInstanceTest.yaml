Description: Deploy Spot Instance
Parameters:
  commitSha: 
    Type: String
    Description: Git commit SHA
    Default: nocommit
  deployDate:
    Type: String
    Description: Date for the deployment
    Default: 1970-01-01 00:00:00
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: starbuck-wsl-ubuntu-ed25519-2021.12.23
  InstanceType:
    Description: EC2 Instance Type.  Default is t3a.small
    Type: String
    Default: t3a.small
    AllowedValues: ['t3.micro', 't3.small', 't3.medium', 't3a.micro', 't3a.small', 't3a.medium']
  Architecture:
    Description: 'Processor Architecture type.  Valid values: amd64, arm64.  Default amd64'
    Type: String
    Default: amd64
    AllowedValues: ['amd64', 'arm64']
  Expiry:
    Type: String
    Description: Expiration for Spot Request
    Default: 2030-12-31T23:59:59Z
  BranchName:
    Type: String
    Description: Which branch to use when pulling bootstrap.sh from aws-bootstrap repository
    Default: main
  Profile:
    Type: String
    Description: What profiles to run when executing deployment
    Default: docker
  ConfigSets:
    Type: String
    Description: What config sets to run
    Default: default
    
Mappings:
  RegionArchAMI:
    us-east-1:
      amd64: ami-04505e74c0741db8d
    us-east-2:
      amd64: ami-0fb653ca2d3203ac1
    us-west-1:
      amd64: ami-01f87c43e618bf8f0
    us-west-2:
      amd64: ami-0892d3c7ee96c0bf7
  MaxSpotPrice:
    t3.micro: 
      SpotPrice: '0.005'
    t3a.micro: 
      SpotPrice: '0.005'
    t3.small: 
      SpotPrice: '0.01'
    t3a.small: 
      SpotPrice: '0.01'
    t3.medium: 
      SpotPrice: '0.015'
    t3a.medium: 
      SpotPrice: '0.015'

Resources:
  SpotFleetRequest:
    Type: 'AWS::EC2::SpotFleet'
    Metadata:
      AWS::CloudFormation::Init: 
        configSets: 
          default: 
            - 'AwsCli'
            - 'standard'
        standard: 
          files:
            /home/ubuntu/.ssh/authorized_keys:
              source: 'https://github.com/sohmc/ssh-keys/releases/download/latest/authorized_keys'
              mode: '000600'
              owner: ubuntu
              group: ubuntu
          commands:
            CopyNewRelicLicense:
              command: |
                #!/bin/bash -xe

                echo 'About to copy NewRelic license from s3 bucket' >> /tmp/test.txt

            NewRelicAgent:
              test: test -e /etc/newrelic-infra.yml
              ignoreErrors: true
              command: |
                #!/bin/bash -xe
                echo "standard:NewRelicAgent" >> /tmp/test.txt
                cat /etc/lsb-release
                curl -s 'https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg' | sudo apt-key add -
                printf 'deb https://download.newrelic.com/infrastructure_agent/linux/apt focal main' | sudo tee -a /etc/apt/sources.list.d/newrelic-infra.list
                apt-get update && apt-get install newrelic-infra -y
            
            SignalStandardHandle:
              test: test -e /home/ubuntu/.ssh/authorized_keys
              ignoreErrors: false
              command: !Sub |
                  #!/bin/bash -xe

                  echo "Sending signal for Standard Install" >> /tmp/test.txt

                  /opt/aws/bin/cfn-signal -e 0 \
                    --stack ${AWS::StackName} \
                    --region ${AWS::Region} \
                    '${InstallStandardHandle}'

                  echo "Done" >> /tmp/test.txt

        AwsCli:
          packages:
            apt:
              zip: []
              unzip: []
          commands: 
            InstallAwsCli:
              ignoreErrors: true
              command: !Sub |
                #!/bin/bash -xe
                cd /tmp

                echo 'starting AWS CLI installation' >> /tmp/test.txt
                whoami >> /tmp/test.txt

                curl -Ls 'https://raw.githubusercontent.com/cloud-mikesoh-com/aws-bootstrap/main/packages/01-awscli.sh' -o awscli.sh
                bash awscli.sh

                aws --version
                
                /opt/aws/bin/cfn-signal -e 0 \
                  --stack ${AWS::StackName} \
                  --region ${AWS::Region} \
                  --reason "awsCli_version: $(aws --version) -- exit code: $?" \
                  --data "awsCli_version: $(aws --version)" \
                  '${InstallAwsCliHandle}'

                aws --version >> /tmp/test.txt
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: lowestPrice
        IamFleetRole: 'arn:aws:iam::426869176820:role/aws-service-role/spotfleet.amazonaws.com/AWSServiceRoleForEC2SpotFleet'
        SpotPrice: !FindInMap [MaxSpotPrice, !Ref 'InstanceType', 'SpotPrice']
        TargetCapacity: 1
        Type: request
        ValidUntil: !Ref Expiry
        TerminateInstancesWithExpiration: false
        LaunchSpecifications:
          - EbsOptimized: false
            InstanceType: !Ref 'InstanceType'
            ImageId: !FindInMap [RegionArchAMI, !Ref 'AWS::Region', !Ref 'Architecture']
            IamInstanceProfile: 
              Arn: 'arn:aws:iam::426869176820:instance-profile/ec2-user-role'
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: managedBy
                    Value: !Join ['-', ['CloudFormationDeployment', !Ref 'commitSha'] ]
                  - Key: deployDate
                    Value: !Ref 'deployDate'
            SubnetId: 'subnet-b5d960ec'
            SecurityGroups:
              - GroupId: !ImportValue 'Galactica-SG-Deploy:galacticaSG'
            KeyName: !Ref KeyName
            BlockDeviceMappings:
              - DeviceName: '/dev/sda1'
                Ebs:
                  DeleteOnTermination: true
                  VolumeSize: 8
                  VolumeType: gp3
            UserData: 
              Fn::Base64:
                !Sub | 
                  #!/bin/bash -xe
                  # This file should be copied into the User Data section of creating AWS
                  # EC2 instances.

                  echo Installing aws-cfn-bootstrap
                  curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz -o /tmp/aws-cfn-bootstrap.tar.gz

                  mkdir -p /opt/aws/bin
                  python3 -m easy_install --script-dir /opt/aws/bin /tmp/aws-cfn-bootstrap.tar.gz

                  echo Initializing instance...
                  /opt/aws/bin/cfn-init -v \
                    --stack ${AWS::StackName} \
                    --region ${AWS::Region} \
                    --resource "SpotFleetRequest" \
                    --configsets ${ConfigSets}

                  export AWS_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                  echo Sending signal: $?
                  /opt/aws/bin/cfn-signal -e $? \
                    --stack ${AWS::StackName} \
                    --region ${AWS::Region} \
                    --data "ipv4_hostname: ${!AWS_HOSTNAME}" \
                    '${HostNameHandle}'
  InstallStandardHandle: 
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  InstallStandardSoftwareCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: 'SpotFleetRequest'
    Properties:
      Count: 1
      Handle: !Ref 'InstallStandardHandle'
      Timeout: 600

  InstallAwsCliHandle: 
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  InstallAwsCliCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: 'SpotFleetRequest'
    Properties:
      Count: 1
      Handle: !Ref 'InstallAwsCliHandle'
      Timeout: 7200

  HostNameHandle: 
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  HostNameCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: 'SpotFleetRequest'
    Properties:
      Count: 1
      Handle: !Ref 'HostNameHandle'
      Timeout: 600

Outputs:
  InstancePublicHostname:
    Description: Public Hostname of the deployed Spot Instance
    Value: !GetAtt HostNameCondition.Data

  AwsCliVersion:
    Description: Install Version of the AWS CLI
    Value: !GetAtt InstallAwsCliCondition.Data